directive @embedded on OBJECT

directive @collection(name: String!) on OBJECT

directive @index(name: String!) on FIELD_DEFINITION

directive @resolver(name: String, paginated: Boolean! = false) on FIELD_DEFINITION

directive @relation(name: String) on FIELD_DEFINITION

directive @unique(index: String) on FIELD_DEFINITION

type Address {
  street: String!
  city: String!
  state: String!
  zipCode: String!
}

"""'Address' input values"""
input AddressInput {
  street: String!
  city: String!
  state: String!
  zipCode: String!
}

type CreditCard {
  network: String!
  number: String!
}

"""'CreditCard' input values"""
input CreditCardInput {
  network: String!
  number: String!
}

type Customer {
  """The document's ID."""
  _id: ID!
  lastName: String!
  firstName: String!
  creditCard: CreditCard!
  address: Address!
  telephone: String!

  """The document's timestamp."""
  _ts: Long!
}

"""'Customer' input values"""
input CustomerInput {
  firstName: String!
  lastName: String!
  address: AddressInput!
  telephone: String!
  creditCard: CreditCardInput!
}

"""The pagination object for elements of type 'Customer'."""
type CustomerPage {
  """The elements of type 'Customer' in this page."""
  data: [Customer]!

  """A cursor for elements coming after the current page."""
  after: String

  """A cursor for elements coming before the current page."""
  before: String
}

scalar Date

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  """Create a new document in the collection of 'Order'"""
  createOrder(
    """'Order' input values"""
    data: OrderInput!
  ): Order!

  """Delete an existing document in the collection of 'Order'"""
  deleteOrder(
    """The 'Order' document's ID"""
    id: ID!
  ): Order

  """Update an existing document in the collection of 'Order'"""
  updateOrder(
    """The 'Order' document's ID"""
    id: ID!

    """'Order' input values"""
    data: OrderInput!
  ): Order

  """Update an existing document in the collection of 'Customer'"""
  updateCustomer(
    """The 'Customer' document's ID"""
    id: ID!

    """'Customer' input values"""
    data: CustomerInput!
  ): Customer

  """Create a new document in the collection of 'Storehouse'"""
  createStorehouse(
    """'Storehouse' input values"""
    data: StorehouseInput!
  ): Storehouse!
  submitOrder(customerId: ID!, products: [SubmitOrderProductInput]): Order!

  """Delete an existing document in the collection of 'Customer'"""
  deleteCustomer(
    """The 'Customer' document's ID"""
    id: ID!
  ): Customer

  """Update an existing document in the collection of 'Storehouse'"""
  updateStorehouse(
    """The 'Storehouse' document's ID"""
    id: ID!

    """'Storehouse' input values"""
    data: StorehouseInput!
  ): Storehouse

  """Create a new document in the collection of 'Product'"""
  createProduct(
    """'Product' input values"""
    data: ProductInput!
  ): Product!

  """Delete an existing document in the collection of 'Storehouse'"""
  deleteStorehouse(
    """The 'Storehouse' document's ID"""
    id: ID!
  ): Storehouse

  """Update an existing document in the collection of 'Product'"""
  updateProduct(
    """The 'Product' document's ID"""
    id: ID!

    """'Product' input values"""
    data: ProductInput!
  ): Product

  """Create a new document in the collection of 'Customer'"""
  createCustomer(
    """'Customer' input values"""
    data: CustomerInput!
  ): Customer!

  """Delete an existing document in the collection of 'Product'"""
  deleteProduct(
    """The 'Product' document's ID"""
    id: ID!
  ): Product
}

type Order {
  shipDate: Time
  line: [ProductLine!]!

  """The document's ID."""
  _id: ID!
  shipAddress: Address!
  creditCard: CreditCard!
  status: String!
  customer: Customer!
  creationDate: Time!

  """The document's timestamp."""
  _ts: Long!
}

"""
Allow manipulating the relationship between the types 'Order' and 'Customer' using the field 'Order.customer'.
"""
input OrderCustomerRelation {
  """
  Create a document of type 'Customer' and associate it with the current document.
  """
  create: CustomerInput

  """
  Connect a document of type 'Customer' with the current document using its ID.
  """
  connect: ID
}

"""'Order' input values"""
input OrderInput {
  customer: OrderCustomerRelation
  line: [ProductLineInput!]!
  status: String!
  creationDate: Time!
  shipDate: Time
  shipAddress: AddressInput!
  creditCard: CreditCardInput!
}

"""The pagination object for elements of type 'Order'."""
type OrderPage {
  """The elements of type 'Order' in this page."""
  data: [Order]!

  """A cursor for elements coming after the current page."""
  after: String

  """A cursor for elements coming before the current page."""
  before: String
}

type Product {
  name: String!
  quantity: Int!
  backorderLimit: Int!
  description: String!

  """The document's ID."""
  _id: ID!
  price: Float!
  storehouse: Storehouse!
  backordered: Boolean!

  """The document's timestamp."""
  _ts: Long!
}

"""'Product' input values"""
input ProductInput {
  name: String!
  description: String!
  price: Float!
  storehouse: ProductStorehouseRelation
  quantity: Int!
  backorderLimit: Int!
  backordered: Boolean!
}

type ProductLine {
  product: Product!
  quantity: Int!
  price: Float!
}

"""'ProductLine' input values"""
input ProductLineInput {
  product: ID!
  quantity: Int!
  price: Float!
}

"""
Allow manipulating the relationship between the types 'ProductLine' and 'Product' using the field 'ProductLine.product'.
"""
input ProductLineProductRelation {
  """
  Create a document of type 'Product' and associate it with the current document.
  """
  create: ProductInput

  """
  Connect a document of type 'Product' with the current document using its ID.
  """
  connect: ID
}

"""The pagination object for elements of type 'Product'."""
type ProductPage {
  """The elements of type 'Product' in this page."""
  data: [Product]!

  """A cursor for elements coming after the current page."""
  after: String

  """A cursor for elements coming before the current page."""
  before: String
}

"""
Allow manipulating the relationship between the types 'Product' and 'Storehouse' using the field 'Product.storehouse'.
"""
input ProductStorehouseRelation {
  """
  Create a document of type 'Storehouse' and associate it with the current document.
  """
  create: StorehouseInput

  """
  Connect a document of type 'Storehouse' with the current document using its ID.
  """
  connect: ID
}

type Query {
  """Find a document from the collection of 'Product' by its id."""
  findProductByID(
    """The 'Product' document's ID"""
    id: ID!
  ): Product

  """Find a document from the collection of 'Order' by its id."""
  findOrderByID(
    """The 'Order' document's ID"""
    id: ID!
  ): Order
  allCustomers(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
  ): CustomerPage!
  allProducts(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
  ): ProductPage!

  """Find a document from the collection of 'Storehouse' by its id."""
  findStorehouseByID(
    """The 'Storehouse' document's ID"""
    id: ID!
  ): Storehouse
  allStorehouses(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
  ): StorehousePage!
  allOrders(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
  ): OrderPage!

  """Find a document from the collection of 'Customer' by its id."""
  findCustomerByID(
    """The 'Customer' document's ID"""
    id: ID!
  ): Customer
}

type Storehouse {
  """The document's ID."""
  _id: ID!

  """The document's timestamp."""
  _ts: Long!
  name: String!
  address: Address!
}

"""'Storehouse' input values"""
input StorehouseInput {
  name: String!
  address: AddressInput!
}

"""The pagination object for elements of type 'Storehouse'."""
type StorehousePage {
  """The elements of type 'Storehouse' in this page."""
  data: [Storehouse]!

  """A cursor for elements coming after the current page."""
  after: String

  """A cursor for elements coming before the current page."""
  before: String
}

input SubmitOrderProductInput {
  productId: ID!
  quantity: Int!
}

scalar Time

